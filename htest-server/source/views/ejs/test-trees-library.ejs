<!DOCTYPE html>
<html lang="en">

<% include sbadmin/header %>

<body>
  <div id="wrapper">

    <% include sbadmin/navigation_bars %>

    <div id="page-wrapper">
      <div class="container-fluid" id="page-wrapper-fluid">
      </div>
      <!-- /.container-fluid -->
    </div>
    <!-- /#page-wrapper -->

  </div>
  <!-- /#wrapper -->

  <!-- jQuery -->
  <script src="js/jquery.js"></script>

  <!-- Bootstrap Core JavaScript -->
  <script src="/js/bootstrap.min.js"></script>
  <script src="/siofu/client.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/components.js"></script>
  <script src="/js/components-displayers.js"></script>
  <script>

    //
    // GUI states and properties
    //

    let socket, siofu;
    const state = {
      pageTitle: '<%= pageTitle %>',
      loaded: false,
    };

    //
    // Display/clear html elements into/from GUI
    //

    function displayTreeFamiliesTable(data) {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const tableResponsive = create('subSection', { title: 'Tree families', id: 'trees-table' });
      const tableHeadContent = [];
      const tableContent = [];

      displaySubSection(tableResponsive);

      Object.keys(data[0]).forEach((itemKey) => {
        tableHeadContent.push(itemKey);
      });
      tableHeadContent.push('view all versions');
      tableHeadContent.push('add new version');
      tableHeadContent.push('delete all versions');

      data.forEach((line) => {
        const tableLine = [];
        Object.keys(line).forEach((itemKey) => {
          const cellContent = line[itemKey];
          tableLine.push(document.createTextNode(cellContent));
        });
        let button;
        button = create('button', { id: null, class: 'btn btn-sm btn-success', text: 'View', onClick: retrieveAndDisplayTreeFamily });
        button.treeFamily = line;
        tableLine.push(button);

        button = create('button', { id: null, class: 'btn btn-sm btn-primary', text: 'Update', onClick: updateTreeFamilyClicked });
        button.treeFamily = line;
        tableLine.push(button);

        button = create('button', { id: null, class: 'btn btn-sm btn-danger', text: 'Delete', onClick: deleteTreeFamilyClicked });
        button.treeFamily = line;
        tableLine.push(button);

        tableContent.push(tableLine);
      });

      const table = create('table', { tableHeadContent, tableContent });
      tableResponsive.appendChild(table);
      pageWrapper.appendChild(tableResponsive);
      return tableResponsive;
    }

    // displayTreeFamiliesPage without displayTreeFamiliesTable
    function displayInitialPage() {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const createTreeFamilyBtn = create('button', { id: null, class: 'btn btn-primary', text: 'Create tree family', onClick: createTreeFamilyClicked });

      clearPage();
      displayPageTitle(state.pageTitle);
      pageWrapper.appendChild(createTreeFamilyBtn);
    }

    function displayTreeFamily(data) {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const createTreeBtn = create('button', { id: null, class: 'btn btn-primary', text: 'Add tree version', onClick: updateTreeFamilyClicked });
      const tableResponsive = create('subSection', { title: `"${data.trees[0].name}" family` , id: 'tree-family-table' });
      const tableHeadContent = [];
      const tableContent = [];

      clearPage();
      displayPageTitle(state.pageTitle);
      pageWrapper.appendChild(createTreeBtn);
      displaySubSection(tableResponsive);

      Object.keys(data.trees[0]).forEach((itemKey) => {
        tableHeadContent.push(itemKey);
      });
      tableHeadContent.push('view tree version');
      tableHeadContent.push('delete tree version');

      data.trees.forEach((line) => {
        const tableLine = [];
        Object.keys(line).forEach((itemKey) => {
          const cellContent = line[itemKey];
          tableLine.push(document.createTextNode(cellContent));
        });
        let button;
        button = create('button', { id: null, class: 'btn btn-sm btn-success', text: 'View', onClick: viewTreeClicked });
        button.tree = line;
        tableLine.push(button);

        button = create('button', { id: null, class: 'btn btn-sm btn-danger', text: 'Delete', onClick: deleteTreeClicked });
        button.tree = line;
        tableLine.push(button);

        tableContent.push(tableLine);
      });

      const table = create('table', { tableHeadContent, tableContent });
      tableResponsive.appendChild(table);
      pageWrapper.appendChild(tableResponsive);
      return tableResponsive;
    }

    function displayTree(tree) {
      const subSection = create('subSection', { title: `"${tree.name}" v${tree.version}`, id: 'tree-viewer' });
      const treeViewer = document.createElement('p');

      clearPage();
      displayPageTitle(state.pageTitle);
      displaySubSection(subSection);
      treeViewer.appendChild(document.createTextNode('(Non rendered XML tree)'));
      treeViewer.appendChild(document.createElement('br'));
      treeViewer.appendChild(document.createTextNode(`"${tree.raw}"`));
      subSection.appendChild(treeViewer);
      document.getElementById('page-wrapper-fluid').appendChild(subSection);
    }

    function displayCreateTreeFamily() {
      const subSection = create('subSection', { title: 'Create tree family', id: 'create-tree-family' });
      const treeFamilyNameInput = create('textInput', { title: 'Tree family\'s name', helpMsg: 'Name', id: 'name-input', onBlur: onFamilyNameInputBlur });
      const nameValidationStatus = create('alert', { status: 'info', title: 'Validation status:', msg: 'You must enter a name', id: 'name-validation-status' });
      const treeFileInput = create('fileInput', { title: 'First family\'s tree (xml)', id: 'upload-input' });
      const fileValidationStatus = create('alert', { status: 'info', title: 'Validation status:', msg: 'You must select a file', id: 'file-validation-status' });
      const fieldset = create('fieldset', { disabled: true, id: 'submit-fieldset' });
      const submitBtn = create('button', { class: 'btn btn-primary', text: 'Submit', id: 'submit-btn' });

      clearPage();
      displayPageTitle(state.pageTitle);
      displaySubSection(subSection);
      subSection.appendChild(treeFamilyNameInput);
      subSection.appendChild(nameValidationStatus);
      subSection.appendChild(treeFileInput);
      subSection.appendChild(fileValidationStatus);
      fieldset.appendChild(submitBtn);
      subSection.appendChild(fieldset);

      siofu.listenOnInput(document.getElementById('upload-input'));
      siofu.addEventListener('start', onNewFamilyFileUploadStart);
      siofu.addEventListener('progress', onNewFamilyFileUploadProgess);
      siofu.addEventListener('complete', onNewFamilyFileUploadComplete);
      document.getElementById('submit-btn').addEventListener('click', submitNewFamilyClicked, false);
    }

    function displayNewFamilyNameValidationStatus(status, message) {
      const alertStatus = status === 'success' ? status : 'danger';
      const validationStatus = create('alert', { status: alertStatus, title: 'Validation status:', msg: message, id: 'name-validation-status' });

      replaceAlert('name-validation-status', validationStatus);
      updateFieldsetState('submit-fieldset', !(state.nameValidated && state.fileValidated));
    }

    function displayNewFamilyFileValidationStatus(status, message) {
      const alertStatus = status === 'success' ? status : (status === 'failure' ? 'danger' : status);
      const validationStatus = create('alert', { status: alertStatus, title: 'Validation status:', msg: message, id: 'file-validation-status' });

      replaceAlert('file-validation-status', validationStatus);
      updateFieldsetState('submit-fieldset', !(state.nameValidated && state.fileValidated));
    }

    function displayUpdateTreeFamily() {
      const subSection = create('subSection', { title: 'Update tree family', id: 'update-tree-family' });

      clearPage();
      displayPageTitle(state.pageTitle);
      displaySubSection(subSection);
    }

    function displayCreateTree() {
      const subSection = create('subSection', { title: 'Create tree', id: 'create-tree' });

      clearPage();
      displayPageTitle(state.pageTitle);
      displaySubSection(subSection);
    }

    function displayUpdateTree() {
      const subSection = create('subSection', { title: 'Update tree', id: 'update-tree' });

      clearPage();
      displayPageTitle(state.pageTitle);
      displaySubSection(subSection);
    }

    //
    // Native page's events
    //

    function createTreeFamilyClicked() {
      console.log('user wants to create tree family');
      displayCreateTreeFamily();
    }

    function viewTreeFamilyClicked(data) {
      console.log('user wants to view tree family', data.target.treeFamily);
    }

    function updateTreeFamilyClicked(data) {
      console.log('user wants to update tree family', data.target.treeFamily);
      displayUpdateTreeFamily(data.target.treeFamily);
    }

    function deleteTreeFamilyClicked(data) {
      console.log('user wants to detete tree family', data.target.treeFamily);
    }

    function viewTreeClicked(data) {
      console.log('viewTreeClicked', data.target.tree);
      retrieveAndDisplayTree(data.target.tree);
    }

    function deleteTreeClicked(data) {
      console.log('deleteTreeClicked', data.target.tree);
    }

    function onFamilyNameInputBlur(data) {
      const name = data.target.value;

      console.log('user leaved tree family name input field with value:', name);
      retrieveNewFamilyNameValidation(name);
    }

    function onNewFamilyFileUploadStart(data) {
      data.file.meta.clientId = state.clientId;
    }

    function onNewFamilyFileUploadProgess(data) {
      const percent = data.bytesLoaded / data.file.size * 100;
      console.log('File is', percent.toFixed(2), 'percent loaded');
      displayNewFamilyFileValidationStatus('info', `On going upload ${percent.toFixed(2)}%...`);
    }

    function onNewFamilyFileUploadComplete(data) {
      console.log('upload success:', data.success);
      console.log(data.file);
      if (data.success) {
        retrieveNewFamilyFileValidation(data.file);
      } else {
        displayNewFamilyFileValidationStatus('failure', 'Unknown error occured during upload');
      }
    }

    function submitNewFamilyClicked() {
      retrieveNewFamilySubmissionStatus();
    }

    //
    // Socket.io events emiters/handlers
    //

    function retrieveAndSaveClientId() {
      const eventName = '<%= pagePath %>';

      socket.once(`${eventName}-response`, (response) => {
        if (response && response.status === 'success') {
          if ('clientId' in response) {
            state.clientId = response.clientId;
          }
        }
      });
      socket.emit(eventName);
    }

    function retrieveAndDisplayTreeFamilies() {
      const eventName = 'retrieve-available-trees';

      socket.once(`${eventName}-response`, (response) => {
        console.log('retrieveAndDisplayTreeFamilies: successfull response received', response);
        if (response && response.status === 'success') {
          if (response.trees) {
            displayTreeFamiliesTable(response.trees);
          }
        }
      });
      socket.emit(eventName);
    }

    function retrieveAndDisplayTreeFamily(data) {
      const eventName = 'retrieve-trees-from-root-id';

      console.log('user wants to view tree family', data.target.treeFamily);
      socket.once(`${eventName}-response`, (response) => {
        if (response && response.status === 'success') {
          const trees = response.trees;
          console.log('retrieveAndDisplayTreeFamily: successfull response received', response);
          if (trees && response.rootId === data.target.treeFamily.rootId) {
            displayTreeFamily(response);
          }
        }
      });
      socket.emit(eventName, { id: data.target.treeFamily.rootId });
    }

    function retrieveAndDisplayTree(tree) {
      const eventName = 'retrieve-tree-from-id';

      console.log('retrieveAndDisplayTree', tree);
      socket.once(`${eventName}-response`, (response) => {
        if (response && response.status && response.status === 'success') {
          console.log('retrieveAndDisplayTree: successfull response received', response);
          if (response.tree && response.tree.id === tree.id) {
            displayTree(response.tree);
          }
        }
      });
      socket.emit(eventName, { id: tree.id });
    }

    function retrieveNewFamilyNameValidation(name) {
      const eventName = 'validate-new-tree-family-name';

      console.log('retrieveNewFamilyNameValidation', name);
      socket.once(`${eventName}-response`, (response) => {
        state.nameValidated = false;
        if (response && response.status) {
          if (response.status === 'success' && response.message) {
            state.nameValidated = true;
            displayNewFamilyNameValidationStatus(response.status, response.message);
          } else if (response.status === 'failure' && response.message) {
            displayNewFamilyNameValidationStatus(response.status, response.message);
          } else {
            displayNewFamilyNameValidationStatus('failure', 'unknown error');
          }
        } else {
          displayNewFamilyNameValidationStatus('failure', 'unknown error');
        }
      });
      socket.emit(eventName, { clientId: state.clientId, name });
    }

    function retrieveNewFamilyFileValidation(file) {
      const eventName = 'validate-new-tree-data';

      console.log('retrieveNewFamilyFileValidation', file);
      socket.once(`${eventName}-response`, (response) => {
        state.fileValidated = false;
        if (response && response.status) {
          if (response.status === 'success' && response.message) {
            state.fileValidated = true;
            displayNewFamilyFileValidationStatus(response.status, response.message);
          } else if (response.status === 'failure' && response.message) {
            displayNewFamilyFileValidationStatus(response.status, response.message);
          } else {
            displayNewFamilyFileValidationStatus('failure', 'Unknown error');
          }
        } else {
          displayNewFamilyFileValidationStatus('failure', 'Unknown error');
        }
      });
      socket.emit(eventName, { clientId: state.clientId, fileId: file.id });
    }

    function retrieveNewFamilySubmissionStatus() {
      const eventName = 'submit-new-tree';

      console.log('retrieveNewFamilySubmissionStatus');
      socket.once(`${eventName}-response`, (response) => {
        if (response && response.status && response.status === 'success') {
          displayInitialPage();
          retrieveAndDisplayTreeFamilies();
        } else {
          if (response && response.message) {
            alert(response.message);
          } else {
            alert('Unknown error');
          }
        }
      });
      socket.emit(eventName, { clientId: state.clientId });
    }

    //
    // On web page loaded
    //

    document.addEventListener('DOMContentLoaded', () => {
      socket = io(window.location.host);
      siofu = new SocketIOFileUpload(socket);

      displayInitialPage();
      socket.on('connect', () => {
        console.log('connect event received');

        retrieveAndSaveClientId();
        if (!state.loaded) {
          retrieveAndDisplayTreeFamilies();
          state.loaded = true;
        }
      });

      socket.on('disconnect', () => {
        console.log('disconnect event received');
      });
    }, false);
  </script>

</body>
