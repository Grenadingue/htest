<!DOCTYPE html>
<html lang="en">

<% include sbadmin/header %>

<body>
  <div id="wrapper">

    <% include sbadmin/navigation_bars %>

    <div id="page-wrapper">
      <div class="container-fluid" id="page-wrapper-fluid">
      </div>
      <!-- /.container-fluid -->
    </div>
    <!-- /#page-wrapper -->

  </div>
  <!-- /#wrapper -->

  <!-- jQuery -->
  <script src="js/jquery.js"></script>

  <!-- Bootstrap Core JavaScript -->
  <script src="js/bootstrap.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>
  <script>

    //
    //// GUI states and properties
    //

    const state = { loaded: false };
    let socket;

    //
    //// Create and return html elements
    //

    function create(element, parameters) {
      const createFunctions = {
        button: createButton,
        table: createTable,
        pageTitle: createPageTitle,
        subSection: createSubSection,
        textInput: createTextInput,
        fileInput: createFileInput,
        alert: createAlert,
      };

      if (createFunctions[element]) {
        return createFunctions[element](parameters);
      }
      return null;
    }

    function createButton(params) {
      const button = document.createElement('button');

      button.setAttribute('type', 'button');
      button.setAttribute('class', params.class_);
      if (params.id) {
        button.setAttribute('id', params.id);
      }
      button.appendChild(document.createTextNode(params.text));
      button.addEventListener('click', params.onClick, false);
      return button;
    }

    function createTable(params) {
      const table = document.createElement('table');
      const tableHead = document.createElement('thead');
      const headItems = document.createElement('tr');
      const tableBody = document.createElement('tbody');
      let item;

      table.setAttribute('class', 'table table-hover');

      // table head
      params.tableHeadContent.forEach((cell) => {
        item = document.createElement('th');
        item.appendChild(document.createTextNode(cell));
        headItems.appendChild(item);
      });
      tableHead.appendChild(headItems);
      table.appendChild(tableHead);

      // table body
      params.tableContent.forEach((line) => {
        const tableLine = document.createElement('tr');
        line.forEach((cell) => {
          item = document.createElement('td');
          item.appendChild(cell);
          tableLine.appendChild(item);
        });
        tableBody.appendChild(tableLine);
      });
      table.appendChild(tableBody);
      return table;
    }

    function createPageTitle(params) {
      const titleWrapper1 = document.createElement('div');
      const titleWrapper2 = document.createElement('div');
      const titleWrapper3 = document.createElement('h1');
      const title = params.title ? params.title : '<%= pageTitle %>';

      titleWrapper1.setAttribute('class', 'row');
      titleWrapper2.setAttribute('class', 'col-lg-12');
      titleWrapper3.setAttribute('class', 'page-header');
      titleWrapper3.appendChild(document.createTextNode(title));
      titleWrapper2.appendChild(titleWrapper3);
      titleWrapper1.appendChild(titleWrapper2);
      return titleWrapper1;
    }

    function createSubSection(params) {
      const sectionWrapper = document.createElement('div');
      const titleWrapper = document.createElement('div');
      const title = document.createElement('h2');

      title.appendChild(document.createTextNode(params.title));
      titleWrapper.setAttribute('class', 'page-header');
      sectionWrapper.setAttribute('class', 'table-responsive');
      if (params.id) {
        sectionWrapper.setAttribute('id', params.id);
      }
      titleWrapper.appendChild(title);
      sectionWrapper.appendChild(titleWrapper);
      return sectionWrapper;
    }

    function createTextInput(params) {
      const textInputWrapper = document.createElement('div');
      const textInputTitle = document.createElement('label');
      const textInput = document.createElement('input');

      textInputWrapper.setAttribute('class', 'form-group');
      textInput.setAttribute('class', 'form-control');
      textInputTitle.appendChild(document.createTextNode(params.title));
      textInputWrapper.appendChild(textInputTitle);
      if (params.helpMsg) {
        textInput.setAttribute('placeholder', params.helpMsg);
      }
      textInputWrapper.appendChild(textInput);
      return textInputWrapper;
    }

    function createFileInput(params) {
      const fileInputWrapper = document.createElement('div');
      const fileInputTitle = document.createElement('label');
      const fileInput = document.createElement('input');

      fileInputWrapper.setAttribute('class', 'form-group');
      fileInput.setAttribute('type', 'file');
      fileInputTitle.appendChild(document.createTextNode(params.title));
      fileInputWrapper.appendChild(fileInputTitle);
      fileInputWrapper.appendChild(fileInput);
      return fileInputWrapper;
    }

    function createAlert(params) {
      const alertWrapper = document.createElement('div');
      const alertTitle = document.createElement('strong');

      alertWrapper.setAttribute('class', `alert alert-${params.status}`);
      if (params.id) {
        alertWrapper.setAttribute('id', params.id);
      }
      alertTitle.appendChild(document.createTextNode(`${params.title} `));
      alertWrapper.appendChild(alertTitle);
      alertWrapper.appendChild(document.createTextNode(params.msg));
      return alertWrapper;
    }

    //
    //// Display/clear html elements into/from GUI
    //

    function setInnerContent(id, content) {
      document.getElementById(id).innerHTML = content;
    }

    function clearPage() {
      setInnerContent('page-wrapper-fluid', '');
    }

    function displayPageTitle(inputTitle) {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const pageTitle = create('pageTitle', { title: inputTitle });

      pageWrapper.appendChild(pageTitle);
    }

    function displaySubSection(subSection) {
      const pageWrapper = document.getElementById('page-wrapper-fluid');

      pageWrapper.appendChild(subSection);
    }

    function displayTreeFamiliesTable(data) {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const tableResponsive = create('subSection', { title: 'Tree families', id: 'trees-table' });
      const tableHeadContent = [];
      const tableContent = [];

      displaySubSection(tableResponsive);

      Object.keys(data[0]).forEach((itemKey) => {
        tableHeadContent.push(itemKey);
      });
      tableHeadContent.push('view all versions');
      tableHeadContent.push('add new version');
      tableHeadContent.push('delete all versions');

      data.forEach((line) => {
        const tableLine = [];
        Object.keys(line).forEach((itemKey) => {
          const cellContent = line[itemKey];
          tableLine.push(document.createTextNode(cellContent));
        });
        let button;
        button = create('button', { id: null, class_: 'btn btn-sm btn-primary', text: 'View', onClick: retrieveAndDisplayTreeFamily });
        button.treeFamily = line;
        tableLine.push(button);

        button = create('button', { id: null, class_: 'btn btn-sm btn-success', text: 'Update', onClick: updateTreeFamilyClicked });
        button.treeFamily = line;
        tableLine.push(button);

        button = create('button', { id: null, class_: 'btn btn-sm btn-danger', text: 'Delete', onClick: deleteTreeFamilyClicked });
        button.treeFamily = line;
        tableLine.push(button);

        tableContent.push(tableLine);
      });

      const table = create('table', { tableHeadContent, tableContent });
      tableResponsive.appendChild(table);
      pageWrapper.appendChild(tableResponsive);
      return tableResponsive;
    }

    // displayTreeFamiliesPage without displayTreeFamiliesTable
    function displayInitialPage() {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const createTreeFamilyBtn = create('button', { id: null, class_: 'btn btn-primary', text: 'Create tree family', onClick: createTreeFamilyClicked });

      clearPage();
      displayPageTitle();
      pageWrapper.appendChild(createTreeFamilyBtn);
    }

    function displayTreeFamily(data) {
      const pageWrapper = document.getElementById('page-wrapper-fluid');
      const tableResponsive = create('subSection', { title: data.trees[0].name, id: 'tree-family-table' });
      const tableHeadContent = [];
      const tableContent = [];

      clearPage();
      displayPageTitle();
      displaySubSection(tableResponsive);

      Object.keys(data.trees[0]).forEach((itemKey) => {
        tableHeadContent.push(itemKey);
      });
      tableHeadContent.push('view tree version');
      tableHeadContent.push('delete tree version');

      data.trees.forEach((line) => {
        const tableLine = [];
        Object.keys(line).forEach((itemKey) => {
          const cellContent = line[itemKey];
          tableLine.push(document.createTextNode(cellContent));
        });
        let button;
        button = create('button', { id: null, class_: 'btn btn-sm btn-primary', text: 'View', onClick: viewTreeClicked });
        button.tree = line;
        tableLine.push(button);

        button = create('button', { id: null, class_: 'btn btn-sm btn-danger', text: 'Delete', onClick: deleteTreeClicked });
        button.tree = line;
        tableLine.push(button);

        tableContent.push(tableLine);
      });

      const table = create('table', { tableHeadContent, tableContent });
      tableResponsive.appendChild(table);
      pageWrapper.appendChild(tableResponsive);
      return tableResponsive;
    }

    function displayTree(tree) {
      const subSection = create('subSection', { title: `${tree.name} (v${tree.version})`, id: 'tree-viewer' });
      const treeViewer = document.createElement('p');

      clearPage();
      displayPageTitle();
      displaySubSection(subSection);
      treeViewer.appendChild(document.createTextNode('(Non rendered XML tree)'));
      treeViewer.appendChild(document.createElement('br'));
      treeViewer.appendChild(document.createTextNode(`"${tree.raw}"`));
      subSection.appendChild(treeViewer);
      document.getElementById('page-wrapper-fluid').appendChild(subSection);
    }

    function displayCreateTreeFamily() {
      const subSection = create('subSection', { title: 'Create tree family', id: 'create-tree-family' });
      const treeFamilyNameInput = create('textInput', { title: 'Tree family\'s name', helpMsg: 'Name' });
      const treeFileInput = create('fileInput', { title: 'First family\'s tree (xml)' });
      const validationStatus = create('alert', { status: 'info', title: 'Validation status:', msg: 'You must select a file', id: 'validation-status' });
      const validationBtn = create('button', { class_: 'btn-primary', text: 'Validate creation' });

      clearPage();
      displayPageTitle();
      displaySubSection(subSection);
      subSection.appendChild(treeFamilyNameInput);
      subSection.appendChild(treeFileInput);
      subSection.appendChild(validationStatus);
      subSection.appendChild(validationBtn);
    }

    function displayUpdateTreeFamily() {
      const subSection = create('subSection', { title: 'Update tree family', id: 'update-tree-family' });

      clearPage();
      displayPageTitle();
      displaySubSection(subSection);
    }

    function displayCreateTree() {
      const subSection = create('subSection', { title: 'Create tree', id: 'create-tree' });

      clearPage();
      displayPageTitle();
      displaySubSection(subSection);
    }

    function displayUpdateTree() {
      const subSection = create('subSection', { title: 'Update tree', id: 'update-tree' });

      clearPage();
      displayPageTitle();
      displaySubSection(subSection);
    }

    //
    //// Native page's events
    //

    function createTreeFamilyClicked() {
      console.log('user wants to create tree family');
      displayCreateTreeFamily();
    }

    function viewTreeFamilyClicked(data) {
      console.log('user wants to view tree family', data.target.treeFamily);
    }

    function updateTreeFamilyClicked(data) {
      console.log('user wants to update tree family', data.target.treeFamily);
      displayUpdateTreeFamily(data.target.treeFamily);
    }

    function deleteTreeFamilyClicked(data) {
      console.log('user wants to detete tree family', data.target.treeFamily);
    }

    function viewTreeClicked(data) {
      console.log('viewTreeClicked', data.target.tree);
      retrieveAndDisplayTree(data.target.tree);
    }

    function deleteTreeClicked(data) {
      console.log('deleteTreeClicked', data.target.tree);
    }

    //
    //// Socket.io events emiters/handlers
    //

    function retrieveAndDisplayTreeFamilies() {
      const eventName = 'retrieve-available-trees';

      socket.once(`${eventName}-response`, (response) => {
        console.log('retrieveAndDisplayTreeFamilies: successfull response received', response);
        if (response && response.status === 'success') {
          if (response.trees) {
            displayTreeFamiliesTable(response.trees);
          }
        }
      });
      socket.emit(eventName);
    }

    function retrieveAndDisplayTreeFamily(data) {
      const eventName = 'retrieve-trees-from-root-id';

      console.log('user wants to view tree family', data.target.treeFamily);
      socket.once(`${eventName}-response`, (response) => {
        if (response && response.status === 'success') {
          const trees = response.trees;
          console.log('retrieveAndDisplayTreeFamily: successfull response received', response);
          if (trees && response.rootId === data.target.treeFamily.rootId) {
            displayTreeFamily(response);
          }
        }
      });
      socket.emit(eventName, { id: data.target.treeFamily.rootId });
    }

    function retrieveAndDisplayTree(tree) {
      const eventName = 'retrieve-tree-from-id';

      console.log('retrieveAndDisplayTree', tree);
      socket.once(`${eventName}-response`, (response) => {
        if (response && response.status && response.status === 'success') {
          console.log('retrieveAndDisplayTree: successfull response received', response);
          if (response.tree && response.tree.id === tree.id) {
            displayTree(response.tree);
          }
        }
      });
      socket.emit(eventName, { id: tree.id });
    }

    //
    //// On web page loaded
    //

    document.addEventListener('DOMContentLoaded', () => {
      socket = io(window.location.host);
      displayInitialPage();

      socket.on('connect', () => {
        console.log('connect event received');

        if (!state.loaded) {
          socket.emit('<%= pagePath %>');
          retrieveAndDisplayTreeFamilies();
          state.loaded = true;
        }
      });

      socket.on('disconnect', () => {
        console.log('disconnect event received');
      });
    }, false);
  </script>

</body>
